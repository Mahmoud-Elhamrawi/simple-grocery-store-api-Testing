{
	"info": {
		"_postman_id": "383f56df-2bcf-46d7-905b-7bf9b5bb5087",
		"name": "Grocery Store API",
		"description": "This project focuses on testing the \"Simple Grocery Store API\" using Postman and Newman. It involves sending requests to various endpoints, validating responses, checking authentication and authorization, and generating detailed reports.\n\nFeatures:  \n\\- Validating the response by creating test cases to check: Status Code, Response time, Response body, and returned data  \n\\- Checking for authentication and authorization  \n\\- Validating response schema  \n\\- Make use of collection variables, dynamic variables, and collection runner.\n\nThe testing scenario includes several steps to ensure thorough validation. It begins with checking if the API is operational, followed by registering a client and creating a new cart. All products are then searched, and a random product is selected. A product is added to the cart, with the process repeated to include more items. The cart details and its items are reviewed, the quantity of one item is modified, an item is replaced with another product, and an item is removed from the cart. An order is created using the cart, and all created orders and their details are reviewed. Order details are then modified, and finally, an order is deleted",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14555402"
	},
	"item": [
		{
			"name": "Register a new API client",
			"item": [
				{
					"name": "Check on Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"UP\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/status",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3 m\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"pm.environment.set(\"token\", jsonData.accessToken);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientName\":\"moaaz hamrawi\",\r\n    \"clientEmail\":\"moaaz20@gmai3.com\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api-clients",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			],
			"description": "Authorization"
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check body data\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"check on the numbers of items\", function () {\r",
									"    pm.expect(jsonData.length).to.eql(20);\r",
									"});\r",
									"\r",
									"\r",
									"//check on values in body respose\r",
									"pm.test(\"check on values in response data id \", function () {\r",
									"\r",
									"    pm.expect(jsonData[0].id).to.eql(4643);\r",
									"    pm.expect(jsonData[19].id).to.eql(4875);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//check response schema\r",
									"pm.test(\"check response schema\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"category\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"inStock\");\r",
									"});\r",
									"\r",
									"\r",
									"//check on headers \r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleProduct}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the available Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check body data length\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"check on the numbers of items\", function () {\r",
									"    pm.expect(jsonData.length).to.eql(20);\r",
									"});\r",
									"\r",
									"\r",
									"//check on values in body respose\r",
									"pm.test(\"check on values in response data \", function () {\r",
									"\r",
									"    pm.expect(jsonData[0].id).to.eql(4643);\r",
									"    pm.expect(jsonData[0].name).to.eql(\"Starbucks Coffee Variety Pack, 100% Arabica\");\r",
									"    pm.expect(jsonData[18].id).to.eql(4875);\r",
									"    pm.expect(jsonData[18].name).to.eql(\"2800 Watt Inverter Generator\");\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//check response schema\r",
									"pm.test(\"check response schema\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"category\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"inStock\");\r",
									"});\r",
									"\r",
									"\r",
									"//check on headers \r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleProduct}}/?available=true",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleProduct}}",
								""
							],
							"query": [
								{
									"key": "available",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the Not available Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check body data\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"check on the numbers of items\", function () {\r",
									"    pm.expect(jsonData.length).to.eql(2);\r",
									"});\r",
									"\r",
									"\r",
									"//check on values in body respose\r",
									"pm.test(\"check on values in response data of ID \", function () {\r",
									"\r",
									"    pm.expect(jsonData[0].id).to.eql(5851);\r",
									"    pm.expect(jsonData[0].name).to.eql(\"Cucumber Organic\");\r",
									"    pm.expect(jsonData[1].id).to.eql(6543);\r",
									"    pm.expect(jsonData[1].name).to.eql(\"Flour Tortillas\");\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//check response schema\r",
									"pm.test(\"check response schema\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"category\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"inStock\");\r",
									"});\r",
									"\r",
									"\r",
									"//check on headers \r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleProduct}}/?available=false",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleProduct}}",
								""
							],
							"query": [
								{
									"key": "available",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check on values in body respose\r",
									"let jsonData = pm.response.json() ;\r",
									"let coffieItemID = pm.environment.get(\"coffieItemID\");\r",
									"\r",
									"console.log(coffieItemID)\r",
									"pm.test(\"check on values in response data \", function () {\r",
									"    pm.expect(jsonData.id).to.eql(parseInt(coffieItemID));\r",
									"    pm.expect(jsonData.category).to.eql(\"coffee\");\r",
									"    pm.expect(jsonData.name).to.eql(\"Starbucks Coffee Variety Pack, 100% Arabica\");\r",
									"\r",
									"});\r",
									"\r",
									"//check response schema\r",
									"pm.test(\"check response schema\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"category\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"inStock\");\r",
									"});\r",
									"\r",
									"\r",
									"//check on headers \r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleProduct}}/{{coffieItemID}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleProduct}}",
								"{{coffieItemID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "All EndPoints that are related with the products"
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//check response body\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"check response body\", function () {\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"cartId\", jsonData.cartId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleCart}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleCart}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add an item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"check body response\", function () {\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"itemId\", jsonData.itemId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.environment.set(\"productId\",8739);\r",
									"pm.environment.set(\"quantity\",3);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"productId\":{{productId}},\r\n   \"quantity\":{{quantity}}\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleCart}}/{{cartId}}/{{PathVariableItem}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleCart}}",
								"{{cartId}}",
								"{{PathVariableItem}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"check on date create\", function () {\r",
									"   pm.expect(jsonData.created).to.contains(getFormattedDate());\r",
									"});\r",
									"\r",
									"let itemId = pm.environment.get(\"itemId\");\r",
									"\r",
									"pm.test(\"check on respone data of itemId\", function () {\r",
									"   pm.expect(jsonData.items[0].id).to.equal(itemId);\r",
									"});\r",
									"\r",
									"\r",
									"let productID = pm.environment.get(\"productId\");\r",
									"console.log(productID)\r",
									"pm.test(\"check on respone data of productID\", function () {\r",
									"   pm.expect(jsonData.items[0].productId).to.equal(productID);\r",
									"});\r",
									"\r",
									"let quantity = pm.environment.get(\"quantity\");\r",
									"pm.test(\"check on respone data of quantity\", function () {\r",
									"   pm.expect(jsonData.items[0].quantity).to.equal(quantity);\r",
									"});\r",
									"\r",
									"// method get current date in the pattern YYYY-MM-DD:\r",
									"function getFormattedDate() {\r",
									"    const now = new Date();\r",
									"    const year = now.getFullYear();\r",
									"    const month = String(now.getMonth() + 1).padStart(2, '0'); // Months are zero-based, so we add 1\r",
									"    const day = String(now.getDate()).padStart(2, '0');\r",
									"\r",
									"    return `${year}-${month}-${day}`;\r",
									"}\r",
									"\r",
									"//itemId  252923281\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//let itemId = pm.environment.get(\"itemId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleCart}}/{{cartId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleCart}}",
								"{{cartId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify quantity item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.environment.set(\"quantityUpdated\", 2);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\":{{quantityUpdated}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleCart}}/{{cartId}}/{{PathVariableItem}}/{{itemId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleCart}}",
								"{{cartId}}",
								"{{PathVariableItem}}",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a cart after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"check on date create\", function () {\r",
									"   pm.expect(jsonData.created).to.contains(getFormattedDate());\r",
									"});\r",
									"\r",
									"\r",
									"let itemId = pm.environment.get(\"itemId\");\r",
									"\r",
									"pm.test(\"check on respone data of itemId\", function () {\r",
									"   pm.expect(jsonData.items[0].id).to.equal(itemId);\r",
									"});\r",
									"\r",
									"///productId\r",
									"\r",
									"var productId =   pm.environment.get(\"productId\");\r",
									"\r",
									"pm.test(\"check on respone data of productID\", function () {\r",
									"  pm.expect(jsonData.items[0].productId).to.equal(productId);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"let quantityUpdated = pm.environment.get(\"quantityUpdated\");\r",
									"pm.test(\"check on respone data of quantity\", function () {\r",
									"   pm.expect(jsonData.items[0].quantity).to.equal(quantityUpdated);\r",
									"});\r",
									"\r",
									"// method get current date in the pattern YYYY-MM-DD:\r",
									"function getFormattedDate() {\r",
									"    const now = new Date();\r",
									"    const year = now.getFullYear();\r",
									"    const month = String(now.getMonth() + 1).padStart(2, '0'); // Months are zero-based, so we add 1\r",
									"    const day = String(now.getDate()).padStart(2, '0');\r",
									"\r",
									"    return `${year}-${month}-${day}`;\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//let itemId = pm.environment.get(\"itemId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleCart}}/{{cartId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleCart}}",
								"{{cartId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace an item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"productIdReplaced\", 1225);\r",
									"pm.environment.set(\"quantityReplaceed\", 1);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n\"productId\":{{productIdReplaced}},\r\n\"quantity\":{{quantityReplaceed}}\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleCart}}/{{cartId}}/{{PathVariableItem}}/{{itemId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleCart}}",
								"{{cartId}}",
								"{{PathVariableItem}}",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a cart after replace item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//console.log(jsonData.items[0].productId);\r",
									"\r",
									"pm.test(\"check on date create\", function () {\r",
									"   pm.expect(jsonData.created).to.contains(getFormattedDate());\r",
									"});\r",
									"\r",
									"let itemId = pm.environment.get(\"itemId\");\r",
									"pm.test(\"check on respone data of itemId\", function () {\r",
									"   pm.expect(jsonData.items[0].id).to.equal(itemId);\r",
									"});\r",
									"\r",
									"\r",
									"let productID = pm.environment.get(\"productIdReplaced\");\r",
									"pm.test(\"check on respone data of productID\", function () {\r",
									"   pm.expect(jsonData.items[0].productId).to.equal(productID);\r",
									"});\r",
									"\r",
									"\r",
									"let quantityUpdated = pm.environment.get(\"quantityReplaceed\");\r",
									"pm.test(\"check on respone data of quantity\", function () {\r",
									"   pm.expect(jsonData.items[0].quantity).to.equal(quantityUpdated);\r",
									"});\r",
									"\r",
									"\r",
									"// method get current date in the pattern YYYY-MM-DD:\r",
									"function getFormattedDate() {\r",
									"    const now = new Date();\r",
									"    const year = now.getFullYear();\r",
									"    const month = String(now.getMonth() + 1).padStart(2, '0'); \r",
									"    const day = String(now.getDate()).padStart(2, '0');\r",
									"\r",
									"    return `${year}-${month}-${day}`;\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//let itemId = pm.environment.get(\"itemId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleCart}}/{{cartId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleCart}}",
								"{{cartId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an item in the cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 2m\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleCart}}/{{cartId}}/{{PathVariableItem}}/{{itemId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleCart}}",
								"{{cartId}}",
								"{{PathVariableItem}}",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add another item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"check body response\", function () {\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"itemId\", jsonData.itemId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.environment.set(\"productId\", 4643);\r",
									"pm.environment.set(\"quantity\", 4);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"productId\":{{productId}},\r\n   \"quantity\":{{quantity}}\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleCart}}/{{cartId}}/{{PathVariableItem}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleCart}}",
								"{{cartId}}",
								"{{PathVariableItem}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a cart after delete item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData.items)\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(jsonData.items[0].id);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"check on date create\", function () {\r",
									"   pm.expect(jsonData.created).to.contains(getFormattedDate());\r",
									"});\r",
									"\r",
									"\r",
									"// method get current date in the pattern YYYY-MM-DD:\r",
									"function getFormattedDate() {\r",
									"    const now = new Date();\r",
									"    const year = now.getFullYear();\r",
									"    const month = String(now.getMonth() + 1).padStart(2, '0'); // Months are zero-based, so we add 1\r",
									"    const day = String(now.getDate()).padStart(2, '0');\r",
									"\r",
									"    return `${year}-${month}-${day}`;\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//let itemId = pm.environment.get(\"itemId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleCart}}/{{cartId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleCart}}",
								"{{cartId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "All Endpoints related with the Cart"
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 2001\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"check body data\", function () {\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"orderId\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let cartId = pm.environment.get(\"cartId\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\":\"{{cartId}}\",\r\n    \"customerName\":\"معاذ محمود\",\r\n    \"comment\":\"i need the item be hold\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleOrder}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleOrder}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new order without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Missing Authorization header\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let cartId = pm.environment.get(\"cartId\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\":\"{{cartId}}\",\r\n    \"customerName\":\" رشاد معاذ محمود\",\r\n    \"comment\":\"i need the item be cold\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleOrder}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleOrder}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});   \r",
									"   \r",
									"   \r",
									"   \r",
									"   \r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"console.log(jsonData[0].id)\r",
									"\r",
									"pm.environment.set(\"orderId\", jsonData[0].id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleOrder}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleOrder}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\":\"محمد محمود\",\r\n    \"comment\":\"the order not compelet\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleOrder}}/{{orderId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleOrder}}",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//orderId\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(pm.environment.get(\"orderId\"));\r",
									"\r",
									"///////////////////////////////////////////////////////////////////\r",
									"\r",
									"\r",
									"let orderID = (pm.environment.get(\"orderId\"));\r",
									"  //console.log(\"ddddd\"+orderID)\r",
									"pm.test(\"check orderID\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(orderID);\r",
									"});\r",
									"var productId1 = pm.environment.get(\"productId\");\r",
									"console.log(productId1)\r",
									"\r",
									"pm.test(\"check Items\", function () {\r",
									"    pm.expect(jsonData.items[0].productId).to.eql(productId1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleOrder}}/{{orderId}}/?invoice=true",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleOrder}}",
								"{{orderId}}",
								""
							],
							"query": [
								{
									"key": "invoice",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check on Status code\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleOrder}}//{{orderId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleOrder}}",
								"",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single order that deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//check on Status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//check Respose Time\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"   let orderId = pm.environment.get(\"orderId\");\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData.error).to.include(`No order with id ${orderId}.`);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/{{pathVaraibleOrder}}/{{orderId}}/?invoice=true",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"{{pathVaraibleOrder}}",
								"{{orderId}}",
								""
							],
							"query": [
								{
									"key": "invoice",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "All Endpoints are related with Orders"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}